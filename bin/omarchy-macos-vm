#!/bin/bash
COMPOSE_FILE="$HOME/.config/macos/docker-compose.yml"

check_prerequisites() {
  local DISK_SIZE_GB=${1:-64}
  local REQUIRED_SPACE=$((DISK_SIZE_GB + 10))  # Add 10GB for macOS image and overhead

  # Check for KVM support
  if [ ! -e /dev/kvm ]; then
    gum style \
      --border normal \
      --padding "1 2" \
      --margin "1" \
      "‚ùå KVM virtualization not available!" \
      "" \
      "Please enable virtualization in BIOS or run:" \
      "  sudo modprobe kvm-intel  # for Intel CPUs" \
      "  sudo modprobe kvm-amd    # for AMD CPUs"
    exit 1
  fi

  # Check disk space
  AVAILABLE_SPACE=$(df "$HOME" | awk 'NR==2 {print int($4/1024/1024)}')
  if [ "$AVAILABLE_SPACE" -lt "$REQUIRED_SPACE" ]; then
    echo "‚ùå Insufficient disk space!"
    echo "   Available: ${AVAILABLE_SPACE}GB"
    echo "   Required: ${REQUIRED_SPACE}GB (${DISK_SIZE_GB}GB disk + 10GB for macOS image)"
    exit 1
  fi
}

install_macos() {
  # Set up trap to handle Ctrl+C
  trap "echo ''; echo 'Installation cancelled by user'; exit 1" INT

  check_prerequisites

  omarchy-pkg-add tigervnc gum

  mkdir -p "$HOME/.macos"
  mkdir -p "$HOME/.config/macos"
  mkdir -p "$HOME/.local/share/applications/icons"

  # Install macOS VM icon and desktop file
  if [ -f "$OMARCHY_PATH/applications/icons/macos.png" ]; then
    cp "$OMARCHY_PATH/applications/icons/macos.png" "$HOME/.local/share/applications/icons/macos.png"
  fi

  cat << EOF | tee "$HOME/.local/share/applications/macos-vm.desktop" > /dev/null
[Desktop Entry]
Name=macOS
Comment=Start macOS VM via Docker-OSX and connect with VNC
Exec=uwsm app -- omarchy-macos-vm launch
Icon=$HOME/.local/share/applications/icons/macos.png
Terminal=false
Type=Application
Categories=System;Virtualization;
EOF

  # Get system resources
  TOTAL_RAM_RAW=$(free -m | grep "^Mem:" | awk '{print $2}')
  TOTAL_RAM=$((TOTAL_RAM_RAW / 1024))  # Convert MB to GB
  TOTAL_CORES=$(nproc)
  AVAILABLE_DISK=$(df "$HOME" | awk 'NR==2 {print int($4/1024/1024)}')

  # Calculate reasonable defaults
  MAX_RAM=$((TOTAL_RAM - 4))  # Leave 4GB for host
  MAX_CORES=$((TOTAL_CORES - 1))  # Leave 1 core for host
  MAX_DISK=$((AVAILABLE_DISK - 20))  # Leave 20GB for host

  # Ensure minimums
  [ "$MAX_RAM" -lt 4 ] && MAX_RAM=4
  [ "$MAX_CORES" -lt 2 ] && MAX_CORES=2
  [ "$MAX_DISK" -lt 32 ] && MAX_DISK=32

  echo ""
  gum style \
    --border normal \
    --padding "1 2" \
    --margin "1" \
    "üçé macOS VM Configuration" \
    "" \
    "System Resources:" \
    "  RAM: $TOTAL_RAM (max: ${MAX_RAM}GB)" \
    "  CPU: $TOTAL_CORES cores (max: $MAX_CORES)" \
    "  Disk: ${AVAILABLE_DISK}GB available (max: ${MAX_DISK}GB)" \
    ""

  # RAM selection
  echo "Select RAM allocation for macOS VM:"
  RAM_OPTIONS="4GB\n6GB\n8GB\n12GB\n16GB\n20GB\n24GB\n32GB"
  SELECTED_RAM=$(echo -e "$RAM_OPTIONS" | gum choose --header "RAM (recommended: 8GB)" | sed 's/GB//')
  
  # Validate RAM selection
  if [ "$SELECTED_RAM" -gt "$MAX_RAM" ]; then
    echo "‚ö†Ô∏è  Selected RAM (${SELECTED_RAM}GB) exceeds available (${MAX_RAM}GB). Using maximum available."
    SELECTED_RAM=$MAX_RAM
  fi

  # CPU selection
  echo ""
  SELECTED_CORES=$(gum input --placeholder="Number of CPU cores (1-$MAX_CORES)" --value="4" --header="How many CPU cores would you like to allocate to macOS VM?" --char-limit=2)
  
  # Check if user cancelled (Ctrl+C in gum input returns empty string)
  if [ -z "$SELECTED_CORES" ]; then
    echo "Installation cancelled by user"
    exit 1
  fi

  if ! [[ "$SELECTED_CORES" =~ ^[0-9]+$ ]] || [ "$SELECTED_CORES" -lt 1 ] || [ "$SELECTED_CORES" -gt "$MAX_CORES" ]; then
    echo "Invalid input. Using default: 4 cores"
    SELECTED_CORES=4
  fi

  # Disk selection
  echo ""
  echo "Select disk size for macOS VM:"
  DISK_OPTIONS="32GB\n64GB\n128GB\n256GB\n512GB"
  SELECTED_DISK=$(echo -e "$DISK_OPTIONS" | gum choose --header "Disk Size (recommended: 64GB)" | sed 's/GB//')
  
  # Validate disk selection
  if [ "$SELECTED_DISK" -gt "$MAX_DISK" ]; then
    echo "‚ö†Ô∏è  Selected disk size (${SELECTED_DISK}GB) exceeds available (${MAX_DISK}GB). Using maximum available."
    SELECTED_DISK=$MAX_DISK
  fi

  # macOS version selection
  echo ""
  echo "Select macOS version:"
  VERSION_OPTIONS="Sequoia (15) - Latest\nSonoma (14) - Recommended\nVentura (13)\nMonterey (12)\nBig Sur (11)\nCatalina (10.15)\nMojave (10.14)\nHigh Sierra (10.13)"
  SELECTED_VERSION=$(echo -e "$VERSION_OPTIONS" | gum choose --header "macOS Version (recommended: Sonoma)" | sed 's/ (.*//')

  # Prompt for username and password
  USERNAME=$(gum input --placeholder="Username (Press enter to use default: docker)" --header="Enter macOS username:")
  if [ -z "$USERNAME" ]; then
    USERNAME="docker"
  fi

  PASSWORD=$(gum input --placeholder="Password (Press enter to use default: admin)" --password --header="Enter macOS password:")
  if [ -z "$PASSWORD" ]; then
    PASSWORD="admin"
    PASSWORD_DISPLAY="(default)"
  else
    PASSWORD_DISPLAY="(user-defined)"
  fi

  # Display configuration summary
  gum style \
    --border normal \
    --padding "1 2" \
    --margin "1" \
    --align left \
    --bold \
    "macOS VM Configuration" \
    "" \
    "macOS Version: $SELECTED_VERSION" \
    "RAM:       ${SELECTED_RAM}GB" \
    "CPU:       $SELECTED_CORES cores" \
    "Disk:      ${SELECTED_DISK}GB" \
    "Username:  $USERNAME" \
    "Password:  $PASSWORD_DISPLAY"

  # Ask for confirmation
  echo ""
  if ! gum confirm "Proceed with this configuration?"; then
    echo "Installation cancelled by user"
    exit 1
  fi

  # Create Docker Compose file
  cat << EOF | tee "$COMPOSE_FILE" > /dev/null
services:
  macos:
    image: sickcodes/docker-osx:latest
    container_name: omarchy-macos
    environment:
      # Basic configuration
      RAM_SIZE: "$SELECTED_RAM"
      CPU_CORES: "$SELECTED_CORES"
      DISK_SIZE: "$SELECTED_DISK"
      # macOS version
      OSX_VERSION: "$SELECTED_VERSION"
      # User credentials
      USERNAME: "$USERNAME"
      PASSWORD: "$PASSWORD"
      # Headless operation
      NOPICKER: "true"
      DISPLAY: ":0"
      VNC_PASSWORD: "password"
      # Performance optimizations
      KVM: "true"
      # Disable audio to prevent errors
      AUDIO_DRIVER: "none"
    devices:
      - /dev/kvm
      - /dev/net/tun
    cap_add:
      - NET_ADMIN
    ports:
      - 5900:5900
      - 6000:6000
    volumes:
      - $HOME/.macos:/storage
      - $HOME/macOS:/shared
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    restart: always
    stop_grace_period: 2m
EOF

  echo ""
  echo "Starting macOS VM installation..."
  echo "This will download a macOS image (may take 20-30 minutes)."
  echo ""
  echo "Monitor installation progress at: http://127.0.0.1:5900"
  echo ""

  # Start docker-compose with user's config
  echo "Starting macOS VM with docker-compose..."
  if ! docker-compose -f "$COMPOSE_FILE" up -d 2>&1; then
    echo "‚ùå Failed to start macOS VM!"
    echo "   Common issues:"
    echo "   - Docker daemon not running: sudo systemctl start docker"
    echo "   - Port already in use: check if another VM is running"
    echo "   - Permission issues: make sure you're in the docker group"
    exit 1
  fi

  echo ""
  echo "macOS VM is starting up!"
  echo ""
  echo "Opening browser to monitor installation..."

  # Open browser to monitor installation
  sleep 3
  xdg-open "http://127.0.0.1:5900"

  echo ""
  echo "Installation is running in the background."
  echo "You can monitor progress at: http://127.0.0.1:5900"
  echo ""
  echo "Once finished, launch 'macOS' via Super + Space"
  echo ""
  echo "To stop the VM: omarchy-macos-vm stop"
  echo "To change resources: ~/.config/macos/docker-compose.yml"
  echo ""
}

remove_macos() {
  echo "Removing macOS VM..."

  docker-compose -f "$COMPOSE_FILE" down 2>/dev/null || true

  docker rmi sickcodes/docker-osx 2>/dev/null || echo "Image already removed or not found"

  rm "$HOME/.local/share/applications/macos-vm.desktop"
  rm -rf "$HOME/.config/macos"
  rm -rf "$HOME/.macos"

  echo ""
  echo "macOS VM removal completed!"
}

launch_macos() {
  KEEP_ALIVE=false
  if [ "$1" = "--keep-alive" ] || [ "$1" = "-k" ]; then
    KEEP_ALIVE=true
  fi

  # Check if config exists
  if [ ! -f "$COMPOSE_FILE" ]; then
    echo "macOS VM not configured. Please run: omarchy-macos-vm install"
    exit 1
  fi

  # Check if container is already running
  CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' omarchy-macos 2>/dev/null)

  if [ "$CONTAINER_STATUS" != "running" ]; then
    echo "Starting macOS VM..."

    # Send desktop notification
    notify-send "macOS VM" "Starting macOS VM, this may take a moment..."

    if ! docker-compose -f "$COMPOSE_FILE" up -d 2>&1; then
      echo "‚ùå Failed to start macOS VM!"
      echo "   Try checking: omarchy-macos-vm status"
      echo "   View logs: docker logs omarchy-macos"
      notify-send -u critical "macOS VM" "Failed to start macOS VM"
      exit 1
    fi

    # Wait for VNC to be ready
    echo "Waiting for macOS VM to be ready..."
    WAIT_COUNT=0
    while ! nc -z 127.0.0.1 5900 2>/dev/null; do
      sleep 2
      WAIT_COUNT=$((WAIT_COUNT + 1))
      if [ $WAIT_COUNT -gt 120 ]; then  # 4 minutes timeout
        echo "‚ùå Timeout waiting for VNC!"
        echo "   The VM might still be installing macOS."
        echo "   Check progress at: http://127.0.0.1:5900"
        exit 1
      fi
    done

    # Give it a moment more to fully initialize
    sleep 5
  fi

  # Build the connection info
  if [ "$KEEP_ALIVE" = true ]; then
    LIFECYCLE="VM will keep running after VNC closes
To stop: omarchy-macos-vm stop"
  else
    LIFECYCLE="VM will auto-stop when VNC closes"
  fi

  gum style \
    --border normal \
    --padding "1 2" \
    --margin "1" \
    --align center \
    "üçé Connecting to macOS VM" \
    "" \
    "$LIFECYCLE"

  # Connect with VNC
  vncviewer 127.0.0.1:5900

  # After VNC closes, stop the container unless --keep-alive was specified
  if [ "$KEEP_ALIVE" = false ]; then
    echo ""
    echo "VNC session closed. Stopping macOS VM..."
    docker-compose -f "$COMPOSE_FILE" down
    echo "macOS VM stopped."
  else
    echo ""
    echo "VNC session closed. macOS VM is still running."
    echo "To stop it: omarchy-macos-vm stop"
  fi
}

stop_macos() {
  if [ ! -f "$COMPOSE_FILE" ]; then
    echo "macOS VM not configured."
    exit 1
  fi

  echo "Stopping macOS VM..."
  docker-compose -f "$COMPOSE_FILE" down
  echo "macOS VM stopped."
}

status_macos() {
  if [ ! -f "$COMPOSE_FILE" ]; then
    echo "macOS VM not configured."
    echo "To set up: omarchy-macos-vm install"
    exit 1
  fi

  CONTAINER_STATUS=$(docker inspect --format='{{.State.Status}}' omarchy-macos 2>/dev/null)

  if [ -z "$CONTAINER_STATUS" ]; then
    echo "macOS VM container not found."
    echo "To start: omarchy-macos-vm launch"
  elif [ "$CONTAINER_STATUS" = "running" ]; then
    gum style \
      --border normal \
      --padding "1 2" \
      --margin "1" \
      --align left \
      "macOS VM Status: RUNNING" \
      "" \
      "Web interface: http://127.0.0.1:5900" \
      "VNC available: port 5900" \
      "" \
      "To connect: omarchy-macos-vm launch" \
      "To stop:    omarchy-macos-vm stop"
  else
    echo "macOS VM is stopped (status: $CONTAINER_STATUS)"
    echo "To start: omarchy-macos-vm launch"
  fi
}

show_usage() {
  echo "Usage: omarchy-macos-vm [command] [options]"
  echo ""
  echo "Commands:"
  echo "  install              Install and configure macOS VM"
  echo "  remove               Remove macOS VM and optionally its data"
  echo "  launch [options]     Start macOS VM (if needed) and connect via VNC"
  echo "                       Options:"
  echo "                         --keep-alive, -k   Keep VM running after VNC closes"
  echo "  stop                 Stop the running macOS VM"
  echo "  status               Show current VM status"
  echo "  help                 Show this help message"
  echo ""
  echo "Examples:"
  echo "  omarchy-macos-vm install           # Set up macOS VM for first time"
  echo "  omarchy-macos-vm launch            # Connect to VM (auto-stop on exit)"
  echo "  omarchy-macos-vm launch -k         # Connect to VM (keep running)"
  echo "  omarchy-macos-vm stop              # Shut down the VM"
}

# Main command dispatcher
case "$1" in
  install)
    install_macos
    ;;
  remove)
    remove_macos
    ;;
  launch|start)
    launch_macos "$2"
    ;;
  stop|down)
    stop_macos
    ;;
  status)
    status_macos
    ;;
  help|--help|-h|"")
    show_usage
    ;;
  *)
    echo "Unknown command: $1" >&2
    echo "" >&2
    show_usage >&2
    exit 1
    ;;
esac

