#!/usr/bin/env bash
set -Eeuo pipefail

# ===========================
# Constants (no magic numbers)
# ===========================
APP_NAME="Hyperfy"
APP_SLUG="hyperfy"
ICON_GLYPH="🌍"
REPO_URL="https://github.com/hyperfy-xyz/hyperfy.git"
REPO_BRANCH="dev"
DEFAULT_PORT="3000"
CONTAINER_NAME_DEFAULT="hyperfy-web"

DATA_ROOT="${XDG_DATA_HOME:-$HOME/.local/share}/omarchy"
GAMES_ROOT="${DATA_ROOT}/games"
APP_ROOT="${GAMES_ROOT}/${APP_SLUG}"
CONFIG_DIR="${APP_ROOT}/config"
STACK_DIR="${APP_ROOT}/compose"
ENV_FILE="${STACK_DIR}/.env"
COMPOSE_FILE="${STACK_DIR}/docker-compose.yml"
# Using text-based lightning bolt icon instead of SVG

TITLE_COLOR="212" # gum color index for headings

# ===========================
# Helpers
# ===========================
need() { command -v "$1" >/dev/null 2>&1 || { echo "Missing dependency: $1"; exit 1; }; }
die() { echo "Error: $*" >&2; exit 1; }
header() { gum style --border thick --margin "1" --padding "1 2" --border-foreground "$TITLE_COLOR" "${ICON_GLYPH}  $*"; }
info() { gum style --foreground 244 "$*"; }

is_port_free() {
  local p="$1"
  if command -v ss >/dev/null 2>&1; then
    ! ss -tulpn 2>/dev/null | grep -qE "[:.]${p}\b"
  else
    ! lsof -iTCP -sTCP:LISTEN -P -n 2>/dev/null | grep -qE "[:.]${p}\b"
  fi
}

wait_http_ready() {
  local url="$1" timeout="${2:-30}" elapsed=0
  until curl -fsS "$url" >/dev/null 2>&1; do
    sleep 1
    elapsed=$((elapsed+1))
    if [ "$elapsed" -ge "$timeout" ]; then return 1; fi
  done
}

ensure_docker_running() {
  docker info >/dev/null 2>&1 || die "Docker daemon not running. Start it (e.g., 'sudo systemctl start docker') and retry."
}

# ===========================
# Preflight
# ===========================
header "Install ${APP_NAME} (dev)"
need gum
need git
need docker
need curl

ensure_docker_running

# Using official pre-built Hyperfy image - no Node verification needed
info "Using official Hyperfy Docker image: ghcr.io/hyperfy-xyz/hyperfy:dev"

# ===========================
# Gather user choices
# ===========================
PORT_INPUT="$(gum input --prompt 'Port to expose (default 3000): ' --value "${DEFAULT_PORT}")"
HYPERFY_PORT="${PORT_INPUT:-$DEFAULT_PORT}"

if ! is_port_free "$HYPERFY_PORT"; then
  die "Port ${HYPERFY_PORT} is in use. Choose a free port and re-run."
fi

CONTAINER_NAME="$(gum input --prompt 'Container name: ' --value "${CONTAINER_NAME_DEFAULT}")"
[ -n "$CONTAINER_NAME" ] || CONTAINER_NAME="${CONTAINER_NAME_DEFAULT}"

# Gather Hyperfy environment variables
echo
info "Configure Hyperfy Environment:"

# Basic Configuration
WORLD_NAME="$(gum input --prompt 'World folder name: ' --value 'world')"
JWT_SECRET="$(gum input --prompt 'JWT Secret: ' --value 'hyper')"
ADMIN_CODE="$(gum input --prompt 'Admin code (leave empty for everyone admin): ')"
SAVE_INTERVAL="$(gum input --prompt 'Save interval (seconds, 0 to disable): ' --value '60')"

# Player Settings
PLAYER_COLLISION="$(gum choose --header 'Should players collide with other players?' 'false' 'true')"
MAX_UPLOAD_SIZE="$(gum input --prompt 'Max upload size for models (MB): ' --value '12')"

# Asset Storage
ASSETS_TYPE="$(gum choose --header 'Asset storage type:' 'local' 's3')"
if [[ "$ASSETS_TYPE" == "s3" ]]; then
  ASSETS_S3_URI="$(gum input --prompt 'S3 URI (s3://bucket/path): ')"
else
  ASSETS_S3_URI=""
fi

# Database Configuration
DB_TYPE="$(gum choose --header 'Database type:' 'local' 'postgres')"
if [[ "$DB_TYPE" == "postgres" ]]; then
  DB_URI="$(gum input --prompt 'Postgres URI (postgres://user:pass@host:port/db): ')"
  DB_SCHEMA="$(gum input --prompt 'Database schema (optional): ')"
else
  DB_URI="local"
  DB_SCHEMA=""
fi

# System Settings
CLEAN_ON_START="$(gum choose --header 'Clean unused assets on startup?' 'true' 'false')"

# AI Configuration (optional)
echo
info "AI Configuration (optional):"
CONFIGURE_AI="$(gum choose --header 'Configure AI integration?' 'Skip' 'Configure')"
if [[ "$CONFIGURE_AI" == "Configure" ]]; then
  AI_PROVIDER="$(gum choose --header 'AI Provider:' 'anthropic' 'openai' 'xai' 'google')"
  case "$AI_PROVIDER" in
    "anthropic")
      AI_MODEL="$(gum choose --header 'Anthropic Model:' 'claude-sonnet-4-20250514' 'claude-opus-4-1-20250805')"
      AI_EFFORT="medium"
      ;;
    "openai")
      AI_MODEL="$(gum choose --header 'OpenAI Model:' 'gpt-5' 'gpt-5-mini' 'gpt-5-nano')"
      AI_EFFORT="$(gum choose --header 'AI Effort:' 'minimal' 'low' 'medium' 'high')"
      ;;
    "xai")
      AI_MODEL="grok-4-0709"
      AI_EFFORT="medium"
      ;;
    "google")
      AI_MODEL="$(gum choose --header 'Google Model:' 'gemini-2.5-pro' 'gemini-2.5-flash')"
      AI_EFFORT="medium"
      ;;
  esac
  AI_API_KEY="$(gum input --prompt 'AI API Key: ' --password)"
else
  AI_PROVIDER="anthropic"
  AI_MODEL="claude-sonnet-4-20250514"
  AI_EFFORT="medium"
  AI_API_KEY=""
fi

# LiveKit Configuration (optional)
echo
info "LiveKit Voice Chat (optional):"
CONFIGURE_LIVEKIT="$(gum choose --header 'Configure LiveKit voice chat?' 'Skip' 'Configure')"
if [[ "$CONFIGURE_LIVEKIT" == "Configure" ]]; then
  LIVEKIT_WS_URL="$(gum input --prompt 'LiveKit WebSocket URL: ')"
  LIVEKIT_API_KEY="$(gum input --prompt 'LiveKit API Key: ')"
  LIVEKIT_API_SECRET="$(gum input --prompt 'LiveKit API Secret: ' --password)"
else
  LIVEKIT_WS_URL=""
  LIVEKIT_API_KEY=""
  LIVEKIT_API_SECRET=""
fi

gum confirm "Proceed installing ${APP_NAME} with Docker to: ${APP_ROOT} and expose http://localhost:${HYPERFY_PORT} ?" || exit 0

# ===========================
# Create configuration
# ===========================
mkdir -p "${APP_ROOT}" "${STACK_DIR}" "${CONFIG_DIR}"

# ===========================
# Generate compose stack
# ===========================
# Create Docker Compose file with embedded YAML
cat > "${COMPOSE_FILE}" <<'COMPOSE_EOF'
name: omarchy-hyperfy
services:
  hyperfy:
    image: ghcr.io/hyperfy-xyz/hyperfy:dev
    container_name: ${HYPERFY_CONTAINER_NAME:-hyperfy-web}
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    env_file:
      - ${HOST_REPO_DIR}/.env
    ports:
      - "${HYPERFY_PORT}:3000"
    volumes:
      - hyperfy_data:/app/world
volumes:
  hyperfy_data:
COMPOSE_EOF

# Create Docker Compose .env file
cat > "${ENV_FILE}" <<EOF
HOST_REPO_DIR=${CONFIG_DIR}
HYPERFY_PORT=${HYPERFY_PORT}
HYPERFY_CONTAINER_NAME=${CONTAINER_NAME}
EOF

# Create Hyperfy application .env file
cat > "${CONFIG_DIR}/.env" <<EOF
# The world folder to run
WORLD=${WORLD_NAME}

# The port the server runs on 
PORT=${HYPERFY_PORT}

# The secret the server uses to create/parse json web tokens
JWT_SECRET=${JWT_SECRET}

# The code used to become admin in the world (type /admin <code> in chat)
# If left blank, everyone is an admin!
ADMIN_CODE=${ADMIN_CODE}

# How often the world saves (seconds) 
# Can be set to 0 to disable saving
SAVE_INTERVAL=${SAVE_INTERVAL}

# Whether players should collide with other players
PUBLIC_PLAYER_COLLISION=${PLAYER_COLLISION}

# The maximum upload file size for models etc (mb)
PUBLIC_MAX_UPLOAD_SIZE=${MAX_UPLOAD_SIZE}

# The public web socket url the client connects to
PUBLIC_WS_URL=ws://localhost:${HYPERFY_PORT}/ws

# The public url used by clients to access api (eg upload assets)
PUBLIC_API_URL=http://localhost:${HYPERFY_PORT}/api

# How assets are stored, fetched and uploaded (local or s3)
ASSETS=${ASSETS_TYPE}
ASSETS_BASE_URL=http://localhost:${HYPERFY_PORT}/assets
ASSETS_S3_URI=${ASSETS_S3_URI}

# By default world data is stored in a local sqlite database in the world folder
# Optionally set this to a postgres uri to store remotely, eg 'postgres://username:password@host:port/database'
DB_URI=${DB_URI}
DB_SCHEMA=${DB_SCHEMA}

# Whether the server should do a cleanup of unused blueprints and assets before launching
CLEAN=${CLEAN_ON_START}

# LiveKit (voice chat)
LIVEKIT_WS_URL=${LIVEKIT_WS_URL}
LIVEKIT_API_KEY=${LIVEKIT_API_KEY}
LIVEKIT_API_SECRET=${LIVEKIT_API_SECRET}


##
# AI
# --
# AI_PROVIDER: openai, anthropic, xai, google
# AI_MODEL: claude-opus-4-1-20250805, claude-sonnet-4-20250514, gpt-5, gpt-5-mini, gpt-5-nano, grok-4-0709, gemini-2.5-pro, gemini-2.5-flash
# AI_EFFORT: minimal, low, medium, high (OpenAI only)
# AI_API_KEY: The api key for the selected provider
##
AI_PROVIDER=${AI_PROVIDER}
AI_MODEL=${AI_MODEL}
AI_EFFORT=${AI_EFFORT}
AI_API_KEY=${AI_API_KEY}
EOF

# Icon file will be handled in webapp creation section

# ===========================
# Start container and health-check
# ===========================
gum spin --title "Starting container..." -- \
  docker compose -f "${COMPOSE_FILE}" --env-file "${ENV_FILE}" up -d

APP_URL="http://127.0.0.1:${HYPERFY_PORT}"
if wait_http_ready "${APP_URL}" 45; then
  info "Service is reachable at ${APP_URL}"
else
  info "Service not reachable yet. It may still be building dependencies. You can check logs:"
  echo "  docker compose -f '${COMPOSE_FILE}' --env-file '${ENV_FILE}' logs -f"
fi

# ===========================
# Create desktop webapp using Omarchy's webapp system
# ===========================
APP_DISPLAY_NAME="${APP_NAME}"
echo
info "Creating webapp launcher..."

# Create Hyperfy icon from embedded base64 data
ICON_DIR="$HOME/.local/share/applications/icons"
mkdir -p "${ICON_DIR}"

# Check if icon already exists and is the same
ICON_FILE="${ICON_DIR}/${APP_NAME}.png"
if [ -f "${ICON_FILE}" ]; then
  info "Using existing ${APP_NAME} icon"
else
  # Create icon from embedded base64 data
  base64 -d > "${ICON_FILE}" <<'ICON_EOF'
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
ICON_EOF
fi

# Create desktop webapp entry
if command -v omarchy-webapp-install >/dev/null 2>&1; then
  # Use local icon file
  LOCAL_ICON="${ICON_DIR}/${APP_NAME}.png"
  gum spin --title "Installing as webapp..." -- \
    omarchy-webapp-install "${APP_DISPLAY_NAME}" "${APP_URL}" "${LOCAL_ICON}" "omarchy-launch-hyperfy"
else
  echo "omarchy-webapp-install not found, creating basic desktop entry"
fi

echo
header "Installation Complete"
echo "Launch now?"
if gum confirm; then
  omarchy-launch-hyperfy || xdg-open "${APP_URL}"
else
  echo "You can launch later with: omarchy-launch-hyperfy"
fi

# Optional: Offer uninstall
if gum confirm "Add an uninstall helper for ${APP_NAME}?"; then
  cat > "${APP_ROOT}/REMOVE.sh" <<'UNINSTALL'
#!/usr/bin/env bash
set -Eeuo pipefail
STACK_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/omarchy/games/hyperfy/compose"
COMPOSE_FILE="${STACK_DIR}/docker-compose.yml"
ENV_FILE="${STACK_DIR}/.env"
[ -f "$COMPOSE_FILE" ] && docker compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" down -v || true
rm -rf "${XDG_DATA_HOME:-$HOME/.local/share}/omarchy/games/hyperfy"
echo "Hyperfy removed."
UNINSTALL
  chmod +x "${APP_ROOT}/REMOVE.sh"
  echo "Uninstall helper at: ${APP_ROOT}/REMOVE.sh"
fi